{
    "collab_server" : "",
    "contents" : "# Example of the BART using the ShinyPsych package\n#\n# Code sections:\n#   - Section 0: Load Libraries\n#   - Section A: assign external values\n#   - Section B: Define overall layout\n#   - Section C: Define reactive values\n#   - Section D: Page layouts\n#   - Section F: Event (e.g. button) actions\n#       - Section F1: Page navigation button\n#       - Section F2: Event Control\n#   - Section G: Save Data\n\n# Section 0: Load Libraries ====================================================\n\nlibrary(shiny)\nlibrary(shinyjs)\nlibrary(ShinyPsych)\n\n\n# Section A: assign external values ============================================\n\n# Dropbox directory to save data\noutputDir <- \"ShinyPsych/Bart\"\n\n# Vector with page ids used to later access objects\nidsVec <- c(\"Instructions\", \"Demographics\", \"Goodbye\")\n\n# create page lists for the instructions and the last page\ninstructions.list <- createPageList(fileName = \"Instructions_Bart\",\n                                    globId = \"Instructions\")\ndemographics.list <- createPageList(fileName = \"Demographics\")\ngoodbye.list <- createPageList(fileName = \"Goodbye\")\n\n# prepare a list with game parameters\nbartDistList <- list(\"diffBalloons\" = 2,\n                     \"balloonIds\" = c(1, 2),\n                     \"distributionType\" = c(\"unif\", \"normal\"),\n                     \"min\" = c(1, NA),\n                     \"max\" = c(10, NA),\n                     \"mean\" = c(NA, 12),\n                     \"sd\" = c(NA, 3),\n                     \"nBalloons\" = c(5, 5),\n                     \"balloonColor\" = c(\"blue\", \"grey\"),\n                     \"max.pop\" = c(10, 15),\n                     \"min.pop\" = c(2, 2))\n\n# create the popped values lists for the bart\nbartContainer <- createBartList(distList = bartDistList, randomize = TRUE)\n\n# Section B: Define overall layout =============================================\n\nui <- fixedPage(\n\n  title = \"ShinyBart\",      # App title\n  uiOutput(\"MainAction\"),\n  useShinyjs(),# For Shinyjs functions\n  includeScriptFiles(fileList = \"bart\") # include appropriate css and js scripts\n\n)\n\nserver <- function(input, output, session) {\n\n  output$MainAction <- renderUI( {\n    PageLayouts()\n\n  })\n\n  # Section C: Define Reactive Values ==========================================\n\n  # CurrentValues controls page setting such as which page to display\n  CurrentValues <- createCtrlList(firstPage = \"instructions\", # id of the first page\n                                  globIds = idsVec,           # ids of pages for createPage\n                                  complCode = TRUE,           # create a completion code\n                                  complName = \"EP-Bart\",      # first element of completion code\n                                  task = \"bart\")              # the task(s) used in the app\n\n  # GameData controls task settings and is used to store the task data\n  GameData <- createTaskCtrlList(task = \"bart\")\n\n  # Section D: Page Layouts ====================================================\n\n  PageLayouts <- reactive({\n\n    # insert created completion code that it can later be displayed\n    goodbye.list <- changePageVariable(pageList = goodbye.list, variable = \"text\",\n                                       oldLabel = \"completion.code\",\n                                       newLabel = CurrentValues$completion.code)\n\n    # display instructions page\n    if (CurrentValues$page == \"instructions\") {\n\n      return(\n        # create html logic of instructions page\n        createPage(pageList = instructions.list,\n                   pageNumber = CurrentValues$Instructions.num,\n                   globId = \"Instructions\", ctrlVals = CurrentValues)\n      )}\n\n    # display task page\n    if (CurrentValues$page == \"game\") {\n\n      return(\n        # create html logic of task page and handle client side communications\n        createBartPage(ctrlVals = CurrentValues, session = session,\n                       balloonList = bartContainer, RDrawBoundary = TRUE)\n      )}\n\n\n    if (CurrentValues$page == \"gameend\") {\n\n      return(list(h3(\"You finished the game!\"),\n                  p(paste(\"You earned\", CurrentValues$points, \"points in the game.\")),\n                  p(\"Please click continue to complete a short survey\"),\n                  actionButton(inputId = \"gt_demographics\",\n                               label = \"Continue\")))\n    }\n\n    if (CurrentValues$page == \"demographics\"){\n\n      return(\n        createPage(pageList = demographics.list, pageNumber = CurrentValues$Demographics.num,\n                   globId = \"Demographics\", ctrlVals = CurrentValues)\n      )}\n\n\n    # P5) Goodbye\n    if (CurrentValues$page == \"goodbye\") {\n\n      return(\n        createPage(pageList = goodbye.list, pageNumber = CurrentValues$Goodbye.num,\n                   globId = \"Goodbye\", ctrlVals = CurrentValues, continueButton = FALSE)\n      )}\n\n  })\n\n\n  # Section F: Event (e.g.; button) actions ======================================\n\n  # Section F1: Page Navigation Buttons ----------------------\n\n\n  observeEvent(input[[\"Instructions_next\"]],{\n    nextPage(pageId = \"instructions\", ctrlVals = CurrentValues, nextPageId = \"game\",\n             pageList = instructions.list, globId = \"Instructions\")\n  })\n\n  # Look for final balloon -> Go to gameend\n  observeEvent({CurrentValues[[\"balloon\"]]}, {\n\n    onBartAction(id = \"next_page\", ctrlVals = CurrentValues, input = input,\n                 bartCtrlList = GameData, balloonList = bartContainer,\n                 nextPageId = \"gameend\")\n\n  })\n\n\n  observeEvent(input[[\"gt_demographics\"]], {\n    CurrentValues$page <- \"demographics\"\n  })\n\n  # Section F2: Event Control ----------------------\n\n  # game control\n\n  # After a pop, start next balloon\n  observeEvent({input[[\"nextballoon\"]]}, {\n\n    onBartAction(id = \"nextballoon\", ctrlVals = CurrentValues, input = input,\n                 bartCtrlList = GameData, balloonList = bartContainer)\n\n  })\n\n  # What to do if the balloon popped:\n  observeEvent(input[[\"popped\"]], {\n\n    onBartAction(id = \"popped\", ctrlVals = CurrentValues, input = input,\n                 bartCtrlList = GameData, balloonList = bartContainer)\n  })\n\n\n  # saveballoon button\n  observeEvent(input[[\"saveballoon\"]], {\n\n    onBartAction(id = \"saveballoon\", ctrlVals = CurrentValues, input = input,\n                 bartCtrlList = GameData, balloonList = bartContainer)\n\n  })\n\n  # Make sure answers are selected\n  observeEvent(reactiveValuesToList(input),{\n\n    onInputEnable(pageId = \"instructions\", ctrlVals = CurrentValues,\n                  pageList = instructions.list, globId = \"Instructions\",\n                  inputList = input, charNum = 4)\n\n    onInputEnable(pageId = \"demographics\", ctrlVals = CurrentValues,\n                  pageList = demographics.list, globId = \"Demographics\",\n                  inputList = input)\n\n  })\n\n  # Section G: Save data =========================================================\n\n  observeEvent(input[[\"Demographics_next\"]], {(\n\n    # Create progress message\n    withProgress(message = \"Saving data...\", value = 0, {\n\n      incProgress(.25)\n\n      # Create a list to save data\n      data.list <- list(  \"id\" = input$Instructions_workerid,\n                          \"balloon\" = GameData$balloon,\n                          \"time\" = GameData$time,\n                          \"action\" = GameData$action,\n                          \"pop\" = GameData$pop,\n                          \"completion.code\" = CurrentValues$completion.code,\n                          \"balloonIds\" = bartContainer$balloonIds[GameData$balloon],\n                          \"age\" = input$Demographics_age,\n                          \"sex\" = input$Demographics_sex)\n\n      # save Data\n      saveData(data.list, location = \"dropbox\", outputDir = outputDir,\n               partId = data.list$id, suffix = \"_g\")\n\n      CurrentValues$page <- \"goodbye\"\n\n    })\n\n  )})\n\n}\n\n# Create app!\nshinyApp(ui = ui, server = server)\n",
    "created" : 1504016126526.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2699537934",
    "id" : "7E2A2543",
    "lastKnownWriteTime" : 1504016147,
    "last_content_update" : 1504016147772,
    "path" : "C:/Users/Markus/switchdrive/packages/ShinyPsych/inst/shiny-examples/BART/app.R",
    "project_path" : "inst/shiny-examples/BART/app.R",
    "properties" : {
    },
    "relative_order" : 13,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}