{
    "collab_server" : "",
    "contents" : "#' Create a List of Outcome Values to Use in the BART Task\n#'\n#' Create a list of pop values (integer value indicating the number of pumps\n#' at which the balloon will pop) drawn from distributions with the specified\n#' parameter values.\n#'\n#' A valid list must have the following options:\n#' An integer number of different balloons that can have differing colors and\n#' distributions named \"diffBalloons\".\n#' An integer vector named \"balloonIds\" containing the identifier for your\n#' balloons. Must have length specified in \"diffBalloons\". Ids must be integers\n#' because they are later used for indexing.\n#' A vector named \"distributionType\" containing the distribution indicators, one\n#' fo each balloon specified at \"diffBalloons\". Valid inputs are \"normal\", \"exp\",\n#' \"unif\", \"beta\" or \"exgauss\".\n#' For each distribution type a vector of the lenth of number of different\n#' balloons named the same as the arguments the specific distributions take.\n#' The names of these arguments must match the argument names from the\n#' distribution documentations. If different distributions are used the length\n#' of the vectors must still match the number of different balloons, use\n#' placeholders for the positions where a specific distribution is not used\n#' (see example).\n#' A vector named \"nBalloons\" specifying how many balloons of each of the\n#' different balloons you want to have, i.e. if you have two different balloons\n#' and want each to be played 5 times, set this to c(5, 5) as in the example.\n#' A vector named \"balloonColors\" specifying the color of each of the different\n#' balloons.\n#' A vector named \"max.pop\" with integer values specifying the maximum number\n#' of pumps that should be possible, regardless of the distribution type. Any\n#' values drawn from the distributions that are larger than the respective\n#' max.pop value is set to max.pop.\n#' @param distList list. Contains information about the distributions from which\n#'  the values should be drawn.\n#' @param randomize logical. If TRUE balloon order is randomized.\n#' @param loadList logical. If TRUE (default is FALSE) the list specifying\n#'  the distribution will be loaded from a local file.\n#' @param fileName string. The name and path of the rds file(s) with the\n#'  distribution info. Has to be specified if loadList is set to TRUE. Can be\n#'  a vector of different files that will be read in and merged.\n#' @importFrom stats rbeta rexp rnorm runif\n#'\n#' @return A list containing a list of pop values, the balloon colors, the\n#'  number of balloons, the maximum possible pop values and the balloon ids.\n#' @export\n#'\n#' @examples\n#'\n#' ### Example with input list\n#' # create a list containing distribution info\n#' bartDistList <- list(\"diffBalloons\" = 2,\n#'                      \"balloonIds\" = c(1, 2),\n#'                      \"distributionType\" = c(\"unif\", \"normal\"),\n#'                      \"min\" = c(1, NA),\n#'                      \"max\" = c(10, NA),\n#'                      \"mean\" = c(NA, 12),\n#'                      \"sd\" = c(NA, 3),\n#'                      \"nBalloons\" = c(5, 5),\n#'                      \"balloonColor\" = c(\"blue\", \"grey\"),\n#'                      \"max.pop\" = c(10, 15),\n#'                      \"min.pop\" = c(2, 2))\n#'\n#' # call createBartList to draw pop values from the distributions\n#' bartContainer <- createBartList(distList = bartDistList, randomize = TRUE)\n#'\n#' bartContainer\n#'\n#' rm(bartDistList)\n#' rm(bartContainer)\n#'\n#' ### Example with loaded lists\n#' # file directory of one file, containing mixed distributions for 2 balloons\n#' containerDir <- system.file(\"shiny-examples\", \"BART\", \"mixedPopVals.RDS\",\n#'                             package = \"ShinyPsych\")\n#' newContainer <- createBartList(randomize = TRUE, fileName = containerDir,\n#'                                loadList = TRUE)\n#' newContainer\n#'\n#' # file directories of two files containing one balloon type each\n#' containerDirVec <- c(system.file(\"shiny-examples\", \"BART\", \"unifPopVals.RDS\",\n#'                                  package = \"ShinyPsych\"),\n#'                      system.file(\"shiny-examples\", \"BART\", \"normalPopVals.RDS\",\n#'                                  package = \"ShinyPsych\"))\n#'\n#' newContainer <- createBartList(randomize = TRUE, fileName = containerDirVec,\n#'                               loadList = TRUE)\n#' newContainer\n#'\n#' rm(containerDir)\n#' rm(containerDirVec)\n#' rm(newContainer)\ncreateBartList <- function(distList, randomize, loadList = FALSE,\n                           fileName = NULL){\n\n  if (isTRUE(loadList)){\n\n    if (length(fileName) > 1){\n      balloonList <- readRDS(fileName[1])\n\n      for (ii in 2:length(fileName)){\n        temp.list <- readRDS(fileName[ii])\n\n        balloonList$PopVals <- c(balloonList$PopVals, temp.list$PopVals)\n        balloonList$balloonColors <- c(balloonList$balloonColors,\n                                       temp.list$balloonColors)\n        balloonList$nBalloons <- c(balloonList$nBalloons, temp.list$nBalloons)\n        balloonList$max.pop <- c(balloonList$max.pop, temp.list$max.pop)\n        balloonList$balloonIds <- c(balloonList$balloonIds,\n                                    temp.list$balloonIds)\n      }\n\n      balloonList$nBalloons <- sum(balloonList$nBalloons)\n\n    } else {\n\n      balloonList <- readRDS(fileName)\n    }\n\n    if (isTRUE(randomize)){\n\n      reInd <- sample(length(balloonList$PopVals))\n\n      balloonList$PopVals <- balloonList$PopVals[reInd]\n\n      balloonList$balloonColors <- balloonList$balloonColors[reInd]\n\n      balloonList$balloonIds <- balloonList$balloonIds[reInd]\n\n    }\n\n  } else {\n\n    PopVals <- unlist(lapply(seq_len(distList$diffBalloons), .getPopVals,\n                      distributionList = distList))\n\n    if (any(distList$balloonColor == \"red\" || distList$balloonColor == \"green\")) {\n      warning(\"Your distList$balloonColor contained \\\"red\\\" or \\\"green\\\". These colors will already be used when the balloons are   saved or pop. Thus you might want to change your color values.\")\n    }\n\n    balloonColors <- rep(distList$balloonColor, distList$nBalloons)\n    balloonIds <- rep(distList$balloonIds, distList$nBalloons)\n\n    if (isTRUE(randomize)){\n\n      reInd <- sample(length(PopVals))\n\n      PopVals <- PopVals[reInd]\n\n      balloonColors <- balloonColors[reInd]\n\n      balloonIds <- balloonIds[reInd]\n\n    }\n\n    balloonList <- list(\"PopVals\" = PopVals,\n                        \"balloonColors\" = balloonColors,\n                        \"nBalloons\" = sum(distList$nBalloons),\n                        \"max.pop\" = distList$max.pop,\n                        \"balloonIds\" = balloonIds)\n  }\n\n  balloonList\n\n}\n\n",
    "created" : 1503991596023.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2414914080",
    "id" : "34E08F6B",
    "lastKnownWriteTime" : 1504017489,
    "last_content_update" : 1504017489227,
    "path" : "C:/Users/Markus/switchdrive/packages/ShinyPsych/R/create_bart_list.R",
    "project_path" : "R/create_bart_list.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}